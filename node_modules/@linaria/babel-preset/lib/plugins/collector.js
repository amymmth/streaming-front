"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.collector = collector;
exports.default = collectorPlugin;
exports.filename = void 0;
var _logger = require("@linaria/logger");
var _utils = require("@linaria/utils");
var _processTemplateExpression = require("../utils/processTemplateExpression");
/**
 * Collector traverses the AST and collects information about imports and
 * all Linaria template literals.
 */

const filename = __filename;
exports.filename = filename;
function collector(file, options, values) {
  var _file$path$scope$getD;
  const processors = [];
  const identifiers = [];
  file.path.traverse({
    Identifier: p => {
      identifiers.push(p);
    }
  });

  // TODO: process transformed literals
  identifiers.forEach(p => {
    (0, _processTemplateExpression.processTemplateExpression)(p, file.opts, options, processor => {
      processor.build(values);
      processor.doRuntimeReplacement();
      processors.push(processor);
    });
  });
  if (processors.length === 0) {
    // We didn't find any Linaria template literals.
    return processors;
  }

  // We can remove __linariaPreval export and all related code
  const prevalExport = (_file$path$scope$getD = file.path.scope.getData('__linariaPreval')) === null || _file$path$scope$getD === void 0 ? void 0 : _file$path$scope$getD.findParent(p => p.isExpressionStatement());
  if (prevalExport) {
    (0, _utils.removeWithRelated)([prevalExport]);
  }
  return processors;
}
function collectorPlugin(babel, options) {
  var _options$values;
  const values = (_options$values = options.values) !== null && _options$values !== void 0 ? _options$values : new Map();
  return {
    name: '@linaria/babel/collector',
    pre(file) {
      (0, _logger.debug)('collect:start', file.opts.filename);
      const processors = collector(file, options, values);
      if (processors.length === 0) {
        // We didn't find any Linaria template literals.
        return;
      }
      this.file.metadata.linaria = {
        processors,
        replacements: [],
        rules: {},
        dependencies: []
      };
      (0, _logger.debug)('collect:end', file.opts.filename);
    },
    visitor: {},
    post(file) {
      (0, _utils.invalidateTraversalCache)(file.path);
    }
  };
}
//# sourceMappingURL=collector.js.map