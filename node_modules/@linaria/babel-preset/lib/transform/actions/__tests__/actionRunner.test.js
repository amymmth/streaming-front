"use strict";

var _entrypointHelpers = require("../../__tests__/entrypoint-helpers");
var _processEntrypoint = require("../../generators/processEntrypoint");
var _actionRunner = require("../actionRunner");
/* eslint-disable require-yield */

describe('actionRunner', () => {
  let services;
  beforeEach(() => {
    services = (0, _entrypointHelpers.createServices)();
  });
  it('should be defined', () => {
    expect(_actionRunner.asyncActionRunner).toBeDefined();
    expect(_actionRunner.syncActionRunner).toBeDefined();
  });
  it('should run action', () => {
    const handlers = (0, _entrypointHelpers.getHandlers)({});
    const entrypoint = (0, _entrypointHelpers.createEntrypoint)(services, '/foo/bar.js', ['default']);
    const action = entrypoint.createAction('processEntrypoint', undefined, null);
    (0, _actionRunner.syncActionRunner)(action, handlers);
    expect(handlers.processEntrypoint).toHaveBeenCalled();
  });
  it('should not run action if its copy was already run', async () => {
    const handler = jest.fn();
    function* handlerGenerator() {
      handler();
      yield ['resolveImports', this.entrypoint, {
        imports: new Map()
      }, null];
    }
    const handlers = (0, _entrypointHelpers.getHandlers)({
      processEntrypoint: handlerGenerator
    });
    const entrypoint1 = (0, _entrypointHelpers.createEntrypoint)(services, '/foo/bar.js', ['default']);
    const entrypoint2 = (0, _entrypointHelpers.createEntrypoint)(services, '/foo/bar.js', ['default']);
    expect(entrypoint1).toBe(entrypoint2);
    const action1 = entrypoint1.createAction('processEntrypoint', undefined, null);
    const action2 = entrypoint2.createAction('processEntrypoint', undefined, null);
    expect(action1).toBe(action2);
    const task1 = (0, _actionRunner.asyncActionRunner)(action1, handlers);
    const task2 = (0, _actionRunner.asyncActionRunner)(action2, handlers);
    await Promise.all([task1, task2]);
    expect(handler).toHaveBeenCalledTimes(1);
    expect(handlers.resolveImports).toHaveBeenCalledTimes(1);
  });
  it('should return value from yielded action', async () => {
    const resolveImportsData = {
      imports: new Map()
    };
    const valueCatcher = jest.fn();
    const resolvedImports = [{
      source: './bar',
      only: ['default'],
      resolved: '/foo/bar.js'
    }];
    function* resolveImports() {
      return resolvedImports;
    }
    const handlers = (0, _entrypointHelpers.getHandlers)({
      *processEntrypoint() {
        const result = yield ['resolveImports', this.entrypoint, resolveImportsData, null];
        valueCatcher(result);
      },
      resolveImports
    });
    const entrypoint = (0, _entrypointHelpers.createEntrypoint)(services, '/foo/bar.js', ['default']);
    const action = entrypoint.createAction('processEntrypoint', undefined, null);
    await (0, _actionRunner.asyncActionRunner)(action, handlers);
    expect(valueCatcher).toBeCalledTimes(1);
    expect(valueCatcher).toBeCalledWith(resolvedImports);
  });
  it('should throw if action was aborted', () => {
    const abortController = new AbortController();
    abortController.abort();
    function* handlerGenerator() {
      yield ['processEntrypoint', this.entrypoint, undefined, abortController.signal];
      throw new Error('Should not be reached');
    }
    const handlers = (0, _entrypointHelpers.getHandlers)({
      workflow: handlerGenerator
    });
    const entrypoint = (0, _entrypointHelpers.createEntrypoint)(services, '/foo/bar.js', ['default']);
    const action = entrypoint.createAction('workflow', undefined, null);
    expect(() => (0, _actionRunner.syncActionRunner)(action, handlers)).toThrowError('workflow@00001#1');
  });
  it('should call recover', () => {
    const abortController = new AbortController();
    abortController.abort();
    function* workflow() {
      yield ['processEntrypoint', this.entrypoint, undefined, abortController.signal];
      throw new Error('Should not be reached');
    }
    const shouldNotBeCalled = jest.fn();
    function* processEntrypointMock() {
      shouldNotBeCalled();
    }
    processEntrypointMock.recover = jest.fn(e => {
      throw e;
    });
    const handlers = (0, _entrypointHelpers.getHandlers)({
      processEntrypoint: processEntrypointMock,
      workflow
    });
    const entrypoint = (0, _entrypointHelpers.createEntrypoint)(services, '/foo/bar.js', ['default']);
    const action = entrypoint.createAction('workflow', undefined, null);
    expect(() => (0, _actionRunner.syncActionRunner)(action, handlers)).toThrowError('workflow@00001#1');
    expect(processEntrypointMock.recover).toHaveBeenCalledWith(expect.objectContaining({
      message: 'workflow@00001#1',
      name: 'AbortError'
    }), expect.objectContaining({
      type: 'processEntrypoint'
    }));
    expect(shouldNotBeCalled).not.toHaveBeenCalled();
  });
  it('should recover', () => {
    const abortController = new AbortController();
    abortController.abort();
    const shouldBeCalled = jest.fn();
    function* workflow() {
      yield ['processEntrypoint', this.entrypoint, undefined, abortController.signal];
      shouldBeCalled();
      return {
        code: '',
        sourceMap: null
      };
    }
    function* processEntrypointMock() {}
    processEntrypointMock.recover = jest.fn((e, action) => {
      return ['processEntrypoint', action.entrypoint, undefined, null];
    });
    const handlers = (0, _entrypointHelpers.getHandlers)({
      processEntrypoint: processEntrypointMock,
      workflow
    });
    const entrypoint = (0, _entrypointHelpers.createEntrypoint)(services, '/foo/bar.js', ['default']);
    const action = entrypoint.createAction('workflow', undefined, null);
    (0, _actionRunner.syncActionRunner)(action, handlers);
    expect(processEntrypointMock.recover).toHaveBeenCalled();
    expect(shouldBeCalled).toHaveBeenCalledTimes(1);
  });
  it('should process triple superseded entrypoint', () => {
    const fooBarDefault = (0, _entrypointHelpers.createEntrypoint)(services, '/foo/bar.js', ['default']);
    const handlers = (0, _entrypointHelpers.getHandlers)({
      explodeReexports: function* explodeReexports() {
        (0, _entrypointHelpers.createEntrypoint)(services, '/foo/bar.js', ['named']);
        (0, _entrypointHelpers.createEntrypoint)(services, '/foo/bar.js', ['default', 'bar']);
        yield ['getExports', this.entrypoint, undefined, null];
      },
      processEntrypoint: _processEntrypoint.processEntrypoint
    });
    const action = fooBarDefault.createAction('processEntrypoint', undefined, null);
    (0, _actionRunner.syncActionRunner)(action, handlers);
  });
});
//# sourceMappingURL=actionRunner.test.js.map