"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHandlers = exports.createServices = exports.createEntrypoint = void 0;
var babel = _interopRequireWildcard(require("@babel/core"));
var _utils = require("@linaria/utils");
var _cache = require("../../cache");
var _Entrypoint = require("../Entrypoint");
var _rootLog = require("../rootLog");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
// eslint-disable-next-line require-yield
function* emptyHandler() {
  return undefined;
}
const getHandlers = partial => ({
  collect: jest.fn(emptyHandler),
  evalFile: jest.fn(emptyHandler),
  explodeReexports: jest.fn(emptyHandler),
  extract: jest.fn(emptyHandler),
  getExports: jest.fn(emptyHandler),
  processEntrypoint: jest.fn(emptyHandler),
  processImports: jest.fn(emptyHandler),
  resolveImports: jest.fn(emptyHandler),
  transform: jest.fn(emptyHandler),
  workflow: jest.fn(emptyHandler),
  ...partial
});
exports.getHandlers = getHandlers;
const createServices = () => ({
  babel,
  cache: new _cache.TransformCacheCollection(),
  loadAndParseFn: jest.fn(() => ({
    ast: {},
    code: '',
    evaluator: jest.fn(),
    evalConfig: {}
  })),
  log: _rootLog.rootLog,
  eventEmitter: _utils.EventEmitter.dummy,
  options: {}
});
exports.createServices = createServices;
const createEntrypoint = (services, name, only, code) => {
  const entrypoint = _Entrypoint.Entrypoint.createRoot(services, name, only, code);
  if (entrypoint.ignored) {
    throw new Error('entrypoint was ignored');
  }
  return entrypoint;
};
exports.createEntrypoint = createEntrypoint;
//# sourceMappingURL=entrypoint-helpers.js.map