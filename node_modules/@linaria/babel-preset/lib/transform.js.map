{"version":3,"file":"transform.js","names":["_utils","require","_cache","_Entrypoint","_actionRunner","_generators","_resolveImports","_loadLinariaOptions","_interopRequireDefault","_withDefaultServices","obj","__esModule","default","transformSync","partialServices","originalCode","syncResolve","customHandlers","options","pluginOptions","loadLinariaOptions","services","withDefaultServices","isFeatureEnabled","features","filename","cache","TransformCacheCollection","entrypoint","Entrypoint","createRoot","ignored","code","sourceMap","inputSourceMap","workflowAction","createAction","undefined","result","syncActionRunner","baseHandlers","resolveImports","syncResolveImports","call","log","name","err","console","error","transform","asyncResolve","asyncActionRunner","asyncResolveImports"],"sources":["../src/transform.ts"],"sourcesContent":["/**\n * This file exposes transform function that:\n * - parse the passed code to AST\n * - transforms the AST using Linaria babel preset ('./babel/index.js) and additional config defined in Linaria config file or passed to bundler configuration.\n * - runs generated CSS files through default of user-defined preprocessor\n * - generates source maps for CSS files\n * - return transformed code (without Linaria template literals), generated CSS, source maps and babel metadata from transform step.\n */\n\nimport { isFeatureEnabled } from '@linaria/utils';\n\nimport { TransformCacheCollection } from './cache';\nimport { Entrypoint } from './transform/Entrypoint';\nimport {\n  asyncActionRunner,\n  syncActionRunner,\n} from './transform/actions/actionRunner';\nimport { baseHandlers } from './transform/generators';\nimport {\n  asyncResolveImports,\n  syncResolveImports,\n} from './transform/generators/resolveImports';\nimport type { PartialOptions } from './transform/helpers/loadLinariaOptions';\nimport loadLinariaOptions from './transform/helpers/loadLinariaOptions';\nimport { withDefaultServices } from './transform/helpers/withDefaultServices';\nimport type {\n  Handlers,\n  IResolveImportsAction,\n  Services,\n} from './transform/types';\nimport type { Result } from './types';\n\ntype PartialServices = Partial<Omit<Services, 'options'>> & {\n  options: Omit<Services['options'], 'pluginOptions'> & {\n    pluginOptions?: PartialOptions;\n  };\n};\n\ntype AllHandlers<TMode extends 'async' | 'sync'> = Handlers<TMode>;\n\nexport function transformSync(\n  partialServices: PartialServices,\n  originalCode: string,\n  syncResolve: (what: string, importer: string, stack: string[]) => string,\n  customHandlers: Partial<AllHandlers<'sync'>> = {}\n): Result {\n  const { options } = partialServices;\n  const pluginOptions = loadLinariaOptions(options.pluginOptions);\n  const services = withDefaultServices({\n    ...partialServices,\n    options: {\n      ...options,\n      pluginOptions,\n    },\n  });\n\n  if (\n    !isFeatureEnabled(pluginOptions.features, 'globalCache', options.filename)\n  ) {\n    // If global cache is disabled, we need to create a new cache for each file\n    services.cache = new TransformCacheCollection();\n  }\n\n  const entrypoint = Entrypoint.createRoot(\n    services,\n    options.filename,\n    ['__linariaPreval'],\n    originalCode\n  );\n\n  if (entrypoint.ignored) {\n    return {\n      code: originalCode,\n      sourceMap: options.inputSourceMap,\n    };\n  }\n\n  const workflowAction = entrypoint.createAction('workflow', undefined);\n\n  try {\n    const result = syncActionRunner(workflowAction, {\n      ...baseHandlers,\n      ...customHandlers,\n      resolveImports() {\n        return syncResolveImports.call(this, syncResolve);\n      },\n    });\n\n    entrypoint.log('%s is ready', entrypoint.name);\n\n    return result;\n  } catch (err) {\n    entrypoint.log('Unhandled error %O', err);\n\n    if (\n      isFeatureEnabled(pluginOptions.features, 'softErrors', options.filename)\n    ) {\n      // eslint-disable-next-line no-console\n      console.error(`Error during transform of ${entrypoint.name}:`, err);\n\n      return {\n        code: originalCode,\n        sourceMap: options.inputSourceMap,\n      };\n    }\n\n    throw err;\n  }\n}\n\nexport default async function transform(\n  partialServices: PartialServices,\n  originalCode: string,\n  asyncResolve: (\n    what: string,\n    importer: string,\n    stack: string[]\n  ) => Promise<string | null>,\n  customHandlers: Partial<AllHandlers<'sync'>> = {}\n): Promise<Result> {\n  const { options } = partialServices;\n  const pluginOptions = loadLinariaOptions(options.pluginOptions);\n  const services = withDefaultServices({\n    ...partialServices,\n    options: {\n      ...options,\n      pluginOptions,\n    },\n  });\n\n  if (\n    !isFeatureEnabled(pluginOptions.features, 'globalCache', options.filename)\n  ) {\n    // If global cache is disabled, we need to create a new cache for each file\n    services.cache = new TransformCacheCollection();\n  }\n\n  /*\n   * This method can be run simultaneously for multiple files.\n   * A shared cache is accessible for all runs, but each run has its own queue\n   * to maintain the correct processing order. The cache stores the outcome\n   * of tree-shaking, and if the result is already stored in the cache\n   * but the \"only\" option has changed, the file will be re-processed using\n   * the combined \"only\" option.\n   */\n  const entrypoint = Entrypoint.createRoot(\n    services,\n    options.filename,\n    ['__linariaPreval'],\n    originalCode\n  );\n\n  if (entrypoint.ignored) {\n    return {\n      code: originalCode,\n      sourceMap: options.inputSourceMap,\n    };\n  }\n\n  const workflowAction = entrypoint.createAction('workflow', undefined);\n\n  try {\n    const result = await asyncActionRunner(workflowAction, {\n      ...baseHandlers,\n      ...customHandlers,\n      resolveImports(this: IResolveImportsAction) {\n        return asyncResolveImports.call(this, asyncResolve);\n      },\n    });\n\n    entrypoint.log('%s is ready', entrypoint.name);\n\n    return result;\n  } catch (err) {\n    entrypoint.log('Unhandled error %O', err);\n\n    if (\n      isFeatureEnabled(pluginOptions.features, 'softErrors', options.filename)\n    ) {\n      // eslint-disable-next-line no-console\n      console.error(`Error during transform of ${entrypoint.name}:`, err);\n\n      return {\n        code: originalCode,\n        sourceMap: options.inputSourceMap,\n      };\n    }\n\n    throw err;\n  }\n}\n"],"mappings":"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"}