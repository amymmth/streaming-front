"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createVmContext = createVmContext;
var vm = _interopRequireWildcard(require("vm"));
var _utils = require("@linaria/utils");
var process = _interopRequireWildcard(require("./process"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const NOOP = () => {};
function createWindow() {
  const {
    Window,
    GlobalWindow
  } = require('happy-dom');
  const HappyWindow = GlobalWindow || Window;
  const win = new HappyWindow();

  // TODO: browser doesn't expose Buffer, but a lot of dependencies use it
  win.Buffer = Buffer;
  win.Uint8Array = Uint8Array;
  return win;
}
function createBaseContext(win, additionalContext) {
  const baseContext = win !== null && win !== void 0 ? win : {};
  baseContext.document = win === null || win === void 0 ? void 0 : win.document;
  baseContext.window = win;
  baseContext.self = win;
  baseContext.top = win;
  baseContext.parent = win;
  baseContext.global = win;
  baseContext.process = process;
  baseContext.clearImmediate = NOOP;
  baseContext.clearInterval = NOOP;
  baseContext.clearTimeout = NOOP;
  baseContext.setImmediate = NOOP;
  baseContext.requestAnimationFrame = NOOP;
  baseContext.setInterval = NOOP;
  baseContext.setTimeout = NOOP;

  // eslint-disable-next-line guard-for-in,no-restricted-syntax
  for (const key in additionalContext) {
    baseContext[key] = additionalContext[key];
  }
  return baseContext;
}
function createHappyDOMWindow() {
  const win = createWindow();
  return {
    teardown: () => {
      win.happyDOM.cancelAsync();
    },
    window: win
  };
}
function createNothing() {
  return {
    teardown: () => {},
    window: undefined
  };
}
function createVmContext(filename, features, additionalContext, overrideContext = i => i) {
  const isHappyDOMEnabled = (0, _utils.isFeatureEnabled)(features, 'happyDOM', filename);
  const {
    teardown,
    window
  } = isHappyDOMEnabled ? createHappyDOMWindow() : createNothing();
  const baseContext = createBaseContext(window, overrideContext({
    __filename: filename,
    ...additionalContext
  }, filename));
  const context = vm.createContext(baseContext);
  return {
    context,
    teardown
  };
}
//# sourceMappingURL=createVmContext.js.map