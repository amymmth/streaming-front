import * as babel from '@babel/core';
import { EventEmitter } from '@linaria/utils';
import { TransformCacheCollection } from '../../cache';
import { Entrypoint } from '../Entrypoint';
import { rootLog } from '../rootLog';
// eslint-disable-next-line require-yield
function* emptyHandler() {
  return undefined;
}
export const getHandlers = partial => ({
  collect: jest.fn(emptyHandler),
  evalFile: jest.fn(emptyHandler),
  explodeReexports: jest.fn(emptyHandler),
  extract: jest.fn(emptyHandler),
  getExports: jest.fn(emptyHandler),
  processEntrypoint: jest.fn(emptyHandler),
  processImports: jest.fn(emptyHandler),
  resolveImports: jest.fn(emptyHandler),
  transform: jest.fn(emptyHandler),
  workflow: jest.fn(emptyHandler),
  ...partial
});
export const createServices = () => ({
  babel,
  cache: new TransformCacheCollection(),
  loadAndParseFn: jest.fn(() => ({
    ast: {},
    code: '',
    evaluator: jest.fn(),
    evalConfig: {}
  })),
  log: rootLog,
  eventEmitter: EventEmitter.dummy,
  options: {}
});
export const createEntrypoint = (services, name, only, code) => {
  const entrypoint = Entrypoint.createRoot(services, name, only, code);
  if (entrypoint.ignored) {
    throw new Error('entrypoint was ignored');
  }
  return entrypoint;
};
//# sourceMappingURL=entrypoint-helpers.js.map